@using WebNovel.Models.Dtos
@model Story
@{
    ViewData["Title"] = Model.Name + " | Trang quản lý";
    var createOrUpdateURL = "/admin/chapter/createorupdate?storyId=" + Model.Id;
    var deleteApi = "/api/chapter/delete-multiple";
}
<style>
    .k-splitter {
        background-color: #ffffff3d;
    }
</style>
@(Html.Kendo().Splitter()
    .Name("splitter")
    .HtmlAttributes(new { style = "height: 100%; width: 100%" })
    .Panes(horizontalPanes =>
    {
        horizontalPanes.Add()
            .HtmlAttributes(new { id = "left-pane", style = "overflow-x: hidden;" })
            .Collapsible(true)
            .Size("300px")
            .Content(@<text>
    <div id="right-pane-main">
        <div id="right-pane-content" class="row form-row-info form-group-row-info">
            <div class="col-sm-12 form-column-info">
                <div class="fields-group-info">
                    <h4 class="control-label fields-group-label-info">
                        @Model.Name
                    </h4>
                </div>
            </div>
            <div class="col-sm-12 form-column-info mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-borderless mb-0">
                                <tbody>
                                    <tr>
                                        <th class="ps-0" scope="row">Tác giả:</th>
                                        <td class="text-muted">@Model.AuthorName</td>
                                    </tr>
                                    <tr>
                                        <th class="ps-0" scope="row">Contributor:</th>
                                        <td class="text-muted">@Model.ContributorName</td>
                                    </tr>
                                    <tr>
                                        <th class="ps-0" scope="row">Thể loại:</th>
                                        <td class="text-muted">@Model.GenreIds</td>
                                    </tr>
                                    <tr>
                                        <th class="ps-0" scope="row">Tags:</th>
                                        <td class="text-muted">
                                            @Model.Tags
                                        </td>
                                    </tr>
                                    <tr>
                                        <th class="ps-0" scope="row">Ngày đăng:</th>
                                        <td class="text-muted">@Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div><!-- end card body -->
                </div>
            </div>
            <div class="col-sm-12 form-column-info mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-borderless mb-0">
                                <tbody>
                                    <tr>
                                        <th class="ps-0" scope="row">Tổng chương:</th>
                                        <td class="text-muted">@Model.TotalChapters</td>
                                    </tr>
                                    <tr>
                                        <th class="ps-0" scope="row">Tổng số từ:</th>
                                        <td class="text-muted">@Model.TotalWords</td>
                                    </tr>
                                    <tr>
                                        <th class="ps-0" scope="row">Tổng lượt đọc:</th>
                                        <td class="text-muted">@Model.ReadCount</td>
                                    </tr>
                                    <tr>
                                        <th class="ps-0" scope="row">Tổng lượt đề cử:</th>
                                        <td class="text-muted">@Model.TotalVotes</td>
                                    </tr>
                                    <tr>
                                        <th class="ps-0" scope="row">Tổng lược yêu thích:</th>
                                        <td class="text-muted">@Model.FollowCount</td>
                                    </tr>
                                    <tr>
                                        <th class="ps-0" scope="row">Tổng lượt lưu trữ:</th>
                                        <td class="text-muted">@Model.ViewCount</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div><!-- end card body -->
                </div>
            </div>

        </div>
    </div>


</text>);
        horizontalPanes.Add()
            .HtmlAttributes(new { id = "right-pane", style = "overflow-x: hidden;" })
            .Collapsible(false)
            .Size("calc(100%  - 300)")
            .Content(
        @<text>

    <div id="main-content">
        <div class="offcanvas offcanvas-end" tabindex="-1" id="searchOffCanvas"
             aria-labelledby="offcanvasExampleLabel">
            <div class="offcanvas-header bg-light">
                <h5 class="offcanvas-title" id="offcanvasExampleLabel">Lọc dữ liệu</h5>
                <button type="button" class="btn-close text-reset"
                        data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="d-flex flex-column justify-content-end h-100">
                <div class="offcanvas-body">
                    <div class="mb-4">
                        <label for="STitle"
                               class="form-label text-muted text-uppercase fw-semibold mb-3">Tiêu đề chương</label>
                        @(Html.Kendo().TextBox()
                        .Name("STitle")
                        .Placeholder(SystemVariable.placeholderTextbox)
                        .HtmlAttributes(new { s_data_field = "STitle" })
                        )
                    </div>
                </div>
                <div class="offcanvas-footer border-top p-3 text-center hstack gap-2">
                    <button class="btn btn-light w-100" data-controller="Chapter" data-view="Index" onclick="ClearFilter(event)">Xóa tất cả</button>
                    <button class="btn btn-success w-100" data-controller="Chapter" data-view="Index" onclick="Filter(event)">Lọc</button>
                </div>
            </div>
        </div>

        <script>
            function onEditRow(e) {
                e.preventDefault();
                var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
                openNewWindow(dataItem.Id, '@createOrUpdateURL', "Cập nhật Chapter", "800px");
            }
            function onDeleteRow(e) {
                e.preventDefault();
                var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
                confirmDelete([dataItem.Id], '@deleteApi', "grid_Chapter_Index")
            }
        </script>

        <div class="row main-body">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive table-card">
                            @(
                            Html.Kendo().Grid<ChapterDto>()
                            .Name("grid_Chapter_Index")
                            .Height("600px")
                            .ToolBar(t =>
                            {
                            t.Custom().ClientTemplate(Html.Kendo().Template().AddHtml(SystemVariable.htmlSearchToolbar));
                            t.Spacer();
                            t.Custom().ClientTemplate(Html.Kendo().Template().AddComponent(c => c
                            .Button()
                            .Name("btnDelete")
                            .Content("Xóa")
                            .IconClass("ri-delete-bin-5-line align-bottom me-1")
                            .HtmlAttributes(new { style = "display: none", @class = "btn-delete" })
                            ));
                            t.Custom().ClientTemplate(Html.Kendo().Template().AddComponent(c => c
                            .Button()
                            .Name("btnFilter")
                            .Content("Lọc")
                            .IconClass("ri-filter-3-line align-bottom me-1")
                            .HtmlAttributes(new { data_bs_toggle = "offcanvas", href = "#searchOffCanvas" })
                            ));
                            t.Custom().ClientTemplate(Html.Kendo().Template().AddComponent(c => c
                            .Button()
                            .Name("btnCreate")
                            .Content("Thêm mới")
                            .Icon("plus")
                            ));
                            t.Excel().Text("Xuất Excel");
                            })
                            .Columns(columns =>
                            {
                            columns.Select().Width(28);
                            columns.Template("<div style='text-align:center;'>#= getRecordNumber() #</div>")
                            .Width(50)
                            .ClientHeaderTemplate("<div style='text-align:center;'>#</div>");
                            columns.Command(command =>
                            {
                            command.Custom("btnEditRow").IconClass("ri-pencil-line").Text(" ")
                            .HtmlAttributes(new { title = "Cập nhật", @class = "k-button-solid-primary" })
                            .Click("onEditRow");
                            command.Custom("btnDeleteRow").IconClass("ri-delete-bin-5-line").Text(" ")
                            .HtmlAttributes(new { title = "Xóa" })
                            .Click("onDeleteRow");
                            }).Width(150);
                            columns.Bound(p => p.Id).Title("Id").Hidden().Width(100).Filterable(ftb => ftb.Multi(true).CheckAll(true).Search(true));
                            columns.Bound(p => p.Title).Title("Tiêu đề chương").Width(200).Filterable(ftb => ftb.Multi(true).CheckAll(true).Search(true));
                            columns.Bound(p => p.Order).Title("Thứ tự").Width(80).Filterable(ftb => ftb.Multi(true).CheckAll(true).Search(true));
                            columns.Bound(p => p.WordCount).Title("SL Từ").Width(100).Filterable(ftb => ftb.Multi(true).CheckAll(true).Search(true));
                            columns.Bound(p => p.ReadCount).Title("Lượt đọc").Width(100).Filterable(ftb => ftb.Multi(true).CheckAll(true).Search(true));
                            columns.Bound(p => p.IsPublic).Title("Công khai").Width(80)
                            .ClientTemplate("#= IsPublic ? 'Công khai' : 'Ẩn' #")
                            .Filterable(ftb => ftb.Multi(true).CheckAll(true).Search(true));
                            columns.Bound(p => p.CreatedAt).Title("Ngày tạo").Width(150)
                            .Format(SystemVariable.formatDateTime)
                            .Filterable(ftb => ftb.Multi(true).CheckAll(true).Search(true));
                            })
                            .Pageable(pager => pager.Input(true).Numeric(true).Refresh(true).Info(true))
                            .Scrollable()
                            .Excel(e => e.AllPages(true))
                            .Sortable()
                            .Filterable()
                            .Reorderable(reOrder => reOrder.Columns(true))
                            .Events(e => e.DataBinding("onDataBindingRecorNumber").Change("onShowButtonToolbar"))
                            .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple).Type(GridSelectionType.Row))
                            .Resizable(rs => rs.Columns(true))
                            .ColumnMenu(menu =>
                            {
                            menu.ComponentType("classic");
                            menu.Filterable(true);
                            })
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(50)
                            .Read(r => r.Url("/api/chapter/gridbystory/" + Model.Id))
                            .Sort(s => { s.Add(m => m.Order).Descending(); })
                            )
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            $("#grid_Chapter_Index").on("click", "[id='btnCreate']", function () {
                openNewWindow(0, '@createOrUpdateURL', "Tạo mới Chapter", "800px");
            });
            $("#grid_Chapter_Index").on("click", "[id='btnDelete']", function () {
                DeleteRowInGrid('@deleteApi', "grid_Chapter_Index", "onShowButtonToolbar");
            });
            $("#grid_Chapter_Index").on("dblclick", "tr[data-uid]", function () {
                var grid = $("#grid_Chapter_Index").data("kendoGrid");
                var id = grid.dataSource.getByUid(this.getAttribute("data-uid")).Id;
                openNewWindow(id, '@createOrUpdateURL', "Cập nhật Chapter", "800px");
            });

            $(document).ready(function () {
                setAllGridsHeight();
            });
        </script>
    </div>
</text>);
    })
)

<script>
    $(document).ready(function () {
        resizeAllComponent("tab");
    });
</script>