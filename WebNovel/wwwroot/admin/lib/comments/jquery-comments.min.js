!function (e) { "function" == typeof define && define.amd ? define(["jquery"], e) : "object" == typeof module && module.exports ? module.exports = function (t, n) { return void 0 === n && (n = "undefined" != typeof window ? require("jquery") : require("jquery")(t)), e(n), n } : e(jQuery) }(function (e) { var t = { $el: null, commentsById: {}, dataFetched: !1, currentSortKey: "", options: {}, events: { click: "closeDropdowns", "keydown [contenteditable]": "saveOnKeydown", "focus [contenteditable]": "saveEditableContent", "keyup [contenteditable]": "checkEditableContentForChange", "paste [contenteditable]": "checkEditableContentForChange", "input [contenteditable]": "checkEditableContentForChange", "blur [contenteditable]": "checkEditableContentForChange", "click .navigation li[data-sort-key]": "navigationElementClicked", "click .navigation li.title": "toggleNavigationDropdown", "click .commenting-field.main .textarea": "showMainCommentingField", "click .commenting-field.main .close": "hideMainCommentingField", "click .commenting-field .textarea": "increaseTextareaHeight", "change .commenting-field .textarea": "increaseTextareaHeight textareaContentChanged", "click .commenting-field:not(.main) .close": "removeCommentingField", "click .commenting-field .send.enabled": "postComment", "click .commenting-field .update.enabled": "putComment", "click .commenting-field .delete.enabled": "deleteComment", 'change .commenting-field .upload.enabled input[type="file"]': "fileInputChanged", "click li.comment button.upvote": "upvoteComment", "click li.comment button.delete.enabled": "deleteComment", "click li.comment .hashtag": "hashtagClicked", "click li.comment .ping": "pingClicked", "click .load-more": "loadMore", "click li.comment ul.child-comments .toggle-all": "toggleReplies", "click li.comment button.reply": "replyButtonClicked", "click li.comment button.edit": "editButtonClicked", dragenter: "showDroppableOverlay", "dragenter .droppable-overlay": "handleDragEnter", "dragleave .droppable-overlay": "handleDragLeaveForOverlay", "dragenter .droppable-overlay .droppable": "handleDragEnter", "dragleave .droppable-overlay .droppable": "handleDragLeaveForDroppable", "dragover .droppable-overlay": "handleDragOverForOverlay", "drop .droppable-overlay": "handleDrop", "click .dropdown.autocomplete": "stopPropagation", "mousedown .dropdown.autocomplete": "stopPropagation", "touchstart .dropdown.autocomplete": "stopPropagation" }, getDefaultOptions: function () { return { rootUrl: "", isMainPage: !1, commentContainer: "", profilePictureURL: "", currentUserIsAdmin: !1, currentUserId: null, commentCount: 0, commentProfilePicturePath: "", spinnerIconURL: "", upvoteIconURL: "", replyIconURL: "", uploadIconURL: "", attachmentIconURL: "", fileIconURL: "", noCommentsIconURL: "", enableCommentingField: !0, textareaPlaceholderText: "Add a comment", newestText: "Newest", oldestText: "Oldest", popularText: "Popular", attachmentsText: "Attachments", sendText: "Send", replyText: "Reply", editText: "Edit", editedText: "Edited", youText: "You", saveText: "Save", deleteText: "Delete", newText: "New", viewAllRepliesText: "View all __replyCount__ replies", hideRepliesText: "Hide replies", noCommentsText: "No comments", loadMoreCommentsText: "Load More", noAttachmentsText: "No attachments", attachmentDropText: "Drop files here", postOn: "added a post to", textFormatter: function (e) { return e }, enableReplying: !0, enableEditing: !0, enableUpvoting: !0, enableDeleting: !0, enableAttachments: !0, enableHashtags: !0, enablePinging: !0, enableDeletingCommentWithReplies: !0, enableNavigation: !0, postCommentOnEnter: !1, forceResponsive: !0, readOnly: !1, defaultNavigationSortKey: "newest", filePath: null, highlightColor: "#2793e6", deleteButtonColor: "#C9302C", scrollContainer: this.$el, roundProfilePictures: !1, textareaRows: 2, textareaRowsOnFocus: 2, textareaMaxRows: 5, maxRepliesVisible: 2, fieldMappings: { id: "id", parent: "parent", created: "created", modified: "modified", content: "content", file: "file", fileURL: "file_url", fileMimeType: "file_mime_type", pings: "pings", creator: "creator", fullname: "fullName", profileURL: "profile_url", profilePictureURL: "profile_picture_url", isNew: "is_new", createdByAdmin: "created_by_admin", createdByCurrentUser: "created_by_current_user", upvoteCount: "upvote_count", userHasUpvoted: "user_has_upvoted", groupName: "groupName", postOnURL: "postOnURL", groupId: "groupId" }, searchUsers: function (e, t, n) { t([]) }, getComments: function (e, t) { e([]) }, downloadAttachment: function (e) { }, loadMoreComments: function (e) { }, postComment: function (e, t, n) { t(e) }, putComment: function (e, t, n) { t(e) }, deleteComment: function (e, t, n) { t() }, upvoteComment: function (e, t, n) { t(e) }, hashtagClicked: function (e) { }, pingClicked: function (e) { }, uploadAttachments: function (e, t, n) { t(e) }, refresh: function () { }, timeFormatter: function (e) { return new Date(e).toLocaleDateString() } } }, init: function (t, n) { var a; this.$el = e(n), this.$el.addClass("jquery-comments"), this.undelegateEvents(), this.delegateEvents(), a = navigator.userAgent || navigator.vendor || window.opera, (jQuery.browser = jQuery.browser || {}).mobile = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)), e.browser.mobile && this.$el.addClass("mobile"), this.options = e.extend(!0, {}, this.getDefaultOptions(), t), this.options.readOnly && this.$el.addClass("read-only"), this.currentSortKey = this.options.defaultNavigationSortKey, this.createCssDeclarations(), this.fetchDataAndRender() }, delegateEvents: function () { this.bindEvents(!1) }, undelegateEvents: function () { this.bindEvents(!0) }, bindEvents: function (t) { var n = t ? "off" : "on"; for (var a in this.events) { var i = a.split(" ")[0], o = a.split(" ").slice(1).join(" "), r = this.events[a].split(" "); for (var s in r) if (r.hasOwnProperty(s)) { var l = this[r[s]]; l = e.proxy(l, this), "" == o ? this.$el[n](i, l) : this.$el[n](i, o, l) } } }, fetchDataAndRender: function () { var t = this; this.commentsById = {}, this.$el.empty(), this.createHTML(), this.options.getComments(function (n) { var a = n.map(function (e) { return t.createCommentModel(e) }); t.sortComments(a, "oldest"), e(a).each(function (e, n) { t.addCommentToDataModel(n) }), t.dataFetched = !0, t.render() }) }, fetchNext: function () { var t = this, n = this.createSpinner(); this.$el.find("ul#comment-list").append(n); this.options.getComments(function (a) { e(a).each(function (e, n) { t.createComment(n) }), n.remove() }, function () { n.remove() }) }, createCommentModel: function (e) { var t = this.applyInternalMappings(e); return t.childs = [], t }, addCommentToDataModel: function (e) { if (!(e.id in this.commentsById) && (this.commentsById[e.id] = e, e.parent)) { var t = this.getOutermostParent(e.parent); null != t && t.childs.push(e.id) } }, updateCommentModel: function (t) { e.extend(this.commentsById[t.id], t) }, render: function () { this.dataFetched && (this.showActiveContainer(), this.createComments(), this.options.enableAttachments && this.createAttachments(), this.$el.find("> .spinner").remove(), this.options.refresh()) }, showActiveContainer: function () { var e = this.$el.find(".navigation li[data-container-name].active").data("container-name"), t = this.$el.find('[data-container="' + e + '"]'); t.siblings("[data-container]").hide(), t.show() }, createComments: function () { var t = this; this.$el.find("#comment-list").remove(); var n = e("<ul/>", { id: "comment-list", class: "main" }), a = [], i = []; e(this.getComments()).each(function (e, n) { null == n.parent ? (t.options.commentCount++, a.push(n), t.options.commentCount >= 10 && t.$el.find("#load-more").show()) : i.push(n) }), this.sortComments(a, this.currentSortKey), a.reverse(), e(a).each(function (e, a) { t.addComment(a, n) }), this.sortComments(i, "oldest"), e(i).each(function (e, a) { t.addComment(a, n) }), this.$el.find('[data-container="comments"]').prepend(n) }, createAttachments: function () { var t = this; this.$el.find("#attachment-list").remove(); var n = e("<ul/>", { id: "attachment-list", class: "main" }), a = this.getAttachments(); this.sortComments(a, "newest"), a.reverse(), e(a).each(function (e, a) { t.addAttachment(a, n) }), this.$el.find('[data-container="attachments"]').prepend(n) }, appendNewComment: function (e) { var t = this.createCommentModel(e); this.addCommentToDataModel(t), this.appendComment(t) }, prependNewComment: function (e) { var t = this.createCommentModel(e); this.addCommentToDataModel(t), this.prependComment(t) }, prependComment: function (e, t) { t = t || this.$el.find("#comment-list"); var n = this.createCommentElement(e); if (e.parent) { var a = t.find('.comment[data-id="' + e.parent + '"]'); this.reRenderCommentActionBar(e.parent); var i = a.parents(".comment").last(); 0 == i.length && (i = a); var o = i.find(".child-comments"), r = o.find(".commenting-field"); r.length ? r.before(n) : o.append(n), this.updateToggleAllButton(i) } else this.options.commentCount++, t.prepend(n) }, appendComment: function (e, t) { t = t || this.$el.find("#comment-list"); var n = this.createCommentElement(e); if (e.parent) { var a = t.find('.comment[data-id="' + e.parent + '"]'); this.reRenderCommentActionBar(e.parent); var i = a.parents(".comment").last(); 0 == i.length && (i = a); var o = i.find(".child-comments"), r = o.find(".commenting-field"); r.length ? r.before(n) : o.append(n), this.updateToggleAllButton(i) } else this.options.commentCount++, t.append(n) }, addComment: function (e, t) { t = t || this.$el.find("#comment-list"); var n = this.createCommentElement(e); if (e.parent) { var a = t.find('.comment[data-id="' + e.parent + '"]'); this.reRenderCommentActionBar(e.parent); var i = a.parents(".comment").last(); 0 == i.length && (i = a); var o = i.find(".child-comments"), r = o.find(".commenting-field"); r.length ? r.before(n) : o.append(n), this.updateToggleAllButton(i) } else t.prepend(n) }, addAttachment: function (e, t) { t = t || this.$el.find("#attachment-list"); var n = this.createCommentElement(e); t.prepend(n) }, removeComment: function (t) { var n = this, a = this.commentsById[t], i = this.getChildComments(a.id); if (e(i).each(function (e, t) { n.removeComment(t.id) }), a.parent) { var o = this.getOutermostParent(a.parent), r = o.childs.indexOf(a.id); o.childs.splice(r, 1) } delete this.commentsById[t]; var s = this.$el.find('li.comment[data-id="' + t + '"]'), l = s.parents("li.comment").last(); s.remove(), this.updateToggleAllButton(l) }, uploadAttachments: function (t, n) { var a = this; n || (n = this.$el.find(".commenting-field.main")); var i = n.find(".upload"), o = !n.hasClass("main"), r = t.length; if (r) { var s = n.find(".textarea"); i.removeClass("enabled"); var l = this.createSpinner(), d = this.createSpinner(); this.$el.find("ul#attachment-list").prepend(l), o ? n.before(d) : this.$el.find("ul#comment-list").prepend(d); var c = []; e(t).each(function (e, t) { var n = a.createCommentJSON(s); n.id += "-" + e, n.file = t, n.fileURL = t.name, n.fileMimeType = t.type, n = a.applyExternalMappings(n), c.push(n) }), a.options.uploadAttachments(c, function (t) { e(t).each(function (e, t) { var n = a.createCommentModel(t); a.addCommentToDataModel(n), a.addComment(n), a.addAttachment(n) }), t.length == r && 0 == a.getTextareaContent(s).length && n.find(".close").trigger("click"), i.addClass("enabled"), d.remove(), l.remove() }, function () { i.addClass("enabled"), d.remove(), l.remove() }), s.text("") } i.find("input").val("") }, updateToggleAllButton: function (t) { if (null != this.options.maxRepliesVisible) { var n = t.find(".child-comments"), a = n.find(".comment"), i = n.find("li.toggle-all"); if (a.removeClass("togglable-reply"), 0 === this.options.maxRepliesVisible) var o = a; else o = a.slice(0, -this.options.maxRepliesVisible); if (o.addClass("togglable-reply"), i.find("span.text").text() == this.options.textFormatter(this.options.hideRepliesText) && o.addClass("visible"), a.length > this.options.maxRepliesVisible) { if (!i.length) { i = e("<li/>", { class: "toggle-all highlight-font-bold" }); var r = e("<span/>", { class: "text" }), s = e("<span/>", { class: "caret" }); i.append(r).append(s), n.prepend(i) } this.setToggleAllButtonText(i, !1) } else i.remove() } }, sortComments: function (e, t) { var n = this; "popularity" == t ? e.sort(function (e, t) { var a = e.childs.length, i = t.childs.length; if (n.options.enableUpvoting && (a += e.upvoteCount, i += t.upvoteCount), i != a) return i - a; var o = new Date(e.created).getTime(); return new Date(t.created).getTime() - o }) : e.sort(function (e, n) { var a = new Date(e.created).getTime(), i = new Date(n.created).getTime(); return "oldest" == t ? a - i : i - a }) }, sortAndReArrangeComments: function (t) { var n = this.$el.find("#comment-list"), a = this.getComments().filter(function (e) { return !e.parent }); this.sortComments(a, t), e(a).each(function (e, t) { var a = n.find("> li.comment[data-id=" + t.id + "]"); n.append(a) }) }, showActiveSort: function () { var e = this.$el.find('.navigation li[data-sort-key="' + this.currentSortKey + '"]'); this.$el.find(".navigation li").removeClass("active"), e.addClass("active"); var t = this.$el.find(".navigation .title"); if ("attachments" != this.currentSortKey) t.addClass("active"), t.find("header").html(e.first().html()); else { var n = this.$el.find(".navigation ul.dropdown").children().first(); t.find("header").html(n.html()) } this.showActiveContainer() }, forceResponsive: function () { this.$el.addClass("responsive") }, closeDropdowns: function () { this.$el.find(".dropdown").hide() }, saveOnKeydown: function (t) { if (13 == t.keyCode) { var n = t.metaKey || t.ctrlKey; if (this.options.postCommentOnEnter || n) e(t.currentTarget).siblings(".control-row").find(".save").trigger("click"), t.stopPropagation(), t.preventDefault() } }, saveEditableContent: function (t) { var n = e(t.currentTarget); n.data("before", n.html()) }, checkEditableContentForChange: function (t) { var n = e(t.currentTarget); e(n[0].childNodes).each(function () { this.nodeType == Node.TEXT_NODE && 0 == this.length && this.removeNode && this.removeNode() }), n.data("before") != n.html() && (n.data("before", n.html()), n.trigger("change")) }, navigationElementClicked: function (t) { var n = e(t.currentTarget).data().sortKey; "attachments" != n && this.sortAndReArrangeComments(n), this.currentSortKey = n, this.showActiveSort() }, toggleNavigationDropdown: function (t) { t.stopPropagation(), e(t.currentTarget).find("~ .dropdown").toggle() }, showMainCommentingField: function (t) { var n = e(t.currentTarget); n.siblings(".control-row").show(), n.parent().find(".close").show(), n.parent().find(".upload.inline-button").hide(), n.focus() }, hideMainCommentingField: function (t) { var n = e(t.currentTarget), a = this.$el.find(".commenting-field.main .textarea"), i = this.$el.find(".commenting-field.main .control-row"); this.clearTextarea(a), this.adjustTextareaHeight(a, !1), i.hide(), n.hide(), a.parent().find(".upload.inline-button").show(), a.blur() }, increaseTextareaHeight: function (t) { var n = e(t.currentTarget); this.adjustTextareaHeight(n, !0) }, textareaContentChanged: function (t) { var n = e(t.currentTarget), a = n.siblings(".control-row").find(".save"); if (!n.find(".reply-to.tag").length) if (n.attr("data-comment")) { var i = n.parents("li.comment"); if (i.length > 1) { var o = i.last().data("id"); n.attr("data-parent", o) } } else { o = n.parents("li.comment").last().data("id"); n.attr("data-parent", o) } var r = n.parents(".commenting-field").first(); n[0].scrollHeight > n.outerHeight() ? r.addClass("commenting-field-scrollable") : r.removeClass("commenting-field-scrollable"); var s = !0, l = this.getTextareaContent(n, !0); if (commentModel = this.commentsById[n.attr("data-comment")]) { var d, c = l != commentModel.content; commentModel.parent && (d = commentModel.parent.toString()); var p = n.attr("data-parent") != d; s = c || p } l.length && s ? a.addClass("enabled") : a.removeClass("enabled") }, removeCommentingField: function (t) { var n = e(t.currentTarget); n.siblings(".textarea").attr("data-comment") && n.parents("li.comment").first().removeClass("edit"), n.parents(".commenting-field").first().remove() }, postComment: function (t) { var n = this, a = e(t.currentTarget), i = a.parents(".commenting-field").first(), o = i.find(".textarea"); a.removeClass("enabled"); var r = this.createCommentJSON(o); r = this.applyExternalMappings(r); this.options.postComment(r, function (e) { n.createComment(e), i.find(".close").trigger("click") }, function () { a.addClass("enabled") }) }, createComment: function (e) { var t = this.createCommentModel(e); this.addCommentToDataModel(t), this.addComment(t) }, putComment: function (t) { var n = this, a = e(t.currentTarget), i = a.parents(".commenting-field").first(), o = i.find(".textarea"); a.removeClass("enabled"); var r = e.extend({}, this.commentsById[o.attr("data-comment")]); e.extend(r, { parent: o.attr("data-parent") || null, content: this.getTextareaContent(o), pings: this.getPings(o), modified: (new Date).getTime() }), r = this.applyExternalMappings(r); this.options.putComment(r, function (e) { var t = n.createCommentModel(e); delete t.childs, n.updateCommentModel(t), i.find(".close").trigger("click"), n.reRenderComment(t.id) }, function () { a.addClass("enabled") }) }, deleteComment: function (t) { if (confirm("Are you sure to do this action?")) { var n = this, a = e(t.currentTarget), i = a.parents(".comment").first(), o = e.extend({}, this.commentsById[i.attr("data-id")]), r = o.id, s = o.parent; a.removeClass("enabled"), o = this.applyExternalMappings(o); this.options.deleteComment(o, function () { n.removeComment(r), s && n.reRenderCommentActionBar(s) }, function () { a.addClass("enabled") }) } }, hashtagClicked: function (t) { var n = e(t.currentTarget).attr("data-value"); this.options.hashtagClicked(n) }, pingClicked: function (t) { var n = e(t.currentTarget).attr("data-value"); this.options.pingClicked(n) }, fileInputChanged: function (t, n) { n = t.currentTarget.files; var a = e(t.currentTarget).parents(".commenting-field").first(); this.uploadAttachments(n, a) }, upvoteComment: function (t) { var n, a = this, i = e(t.currentTarget).parents("li.comment").first().data().model, o = i.upvoteCount; n = i.userHasUpvoted ? o - 1 : o + 1, i.userHasUpvoted = !i.userHasUpvoted, i.upvoteCount = n, this.reRenderUpvotes(i.id); var r = e.extend({}, i); r = this.applyExternalMappings(r); this.options.upvoteComment(r, function (e) { var t = a.createCommentModel(e); a.updateCommentModel(t), a.reRenderUpvotes(t.id) }, function () { i.userHasUpvoted = !i.userHasUpvoted, i.upvoteCount = o, a.reRenderUpvotes(i.id) }) }, toggleReplies: function (t) { var n = e(t.currentTarget); n.siblings(".togglable-reply").toggleClass("visible"), this.setToggleAllButtonText(n, !0) }, replyButtonClicked: function (t) { var n = this, a = e(t.currentTarget), i = a.parents("li.comment").last(), o = a.parents(".comment").first().data().id, r = i.find(".child-comments > .commenting-field"); if (r.length && r.remove(), r.find(".textarea").attr("data-parent") != o) { r = this.createCommentingFieldElement(o), i.find(".child-comments").append(r); var s = r.find(".textarea"); this.moveCursorToEnd(s); var l = this.options.scrollContainer.scrollTop(), d = l + r.position().top + r.outerHeight(), c = l + this.options.scrollContainer.outerHeight(); if (d > c) { var p = l + (d - c); this.options.scrollContainer.scrollTop(p) } } e(function () { window.emojiPicker = new EmojiPicker({ emojiable_selector: "[data-emojiable=true]", assetsPath: n.options.rootUrl + "/lib/emoji-picker/img/", popupButtonClasses: "fa fa-smile-o" }, n), window.emojiPicker.discover(), n.pingingUser(s) }) }, editButtonClicked: function (t) { var n = e(t.currentTarget).parents("li.comment").first(), a = n.data().model; n.addClass("edit"); var i = this.createCommentingFieldElement(a.parent, a.id); n.find(".comment-wrapper").first().append(i); var o = i.find(".textarea"); o.attr("data-comment", a.id), o.append(this.getFormattedCommentContent(a, !0)), this.moveCursorToEnd(o) }, loadMore: function (e) { this.options.loadMoreComments(this) }, prepareLader: function (t) { var n = this; (n.options.commentCount >= 10 || n.options.commentCount >= 10 && t.length >= 1) && e.each(t, function (e, t) { n.appendNewComment(t) }), t.length < 10 && n.$el.find("#load-more").hide() }, showDroppableOverlay: function (e) { this.options.enableAttachments && (this.$el.find(".droppable-overlay").css("top", this.$el[0].scrollTop), this.$el.find(".droppable-overlay").show(), this.$el.addClass("drag-ongoing")) }, handleDragEnter: function (t) { var n = e(t.currentTarget).data("dnd-count") || 0; n++, e(t.currentTarget).data("dnd-count", n), e(t.currentTarget).addClass("drag-over") }, handleDragLeave: function (t, n) { var a = e(t.currentTarget).data("dnd-count"); a--, e(t.currentTarget).data("dnd-count", a), 0 == a && (e(t.currentTarget).removeClass("drag-over"), n && n()) }, handleDragLeaveForOverlay: function (e) { var t = this; this.handleDragLeave(e, function () { t.hideDroppableOverlay() }) }, handleDragLeaveForDroppable: function (e) { this.handleDragLeave(e) }, handleDragOverForOverlay: function (e) { e.stopPropagation(), e.preventDefault(), e.originalEvent.dataTransfer.dropEffect = "copy" }, hideDroppableOverlay: function () { this.$el.find(".droppable-overlay").hide(), this.$el.removeClass("drag-ongoing") }, handleDrop: function (t) { t.preventDefault(), e(t.target).trigger("dragleave"), this.hideDroppableOverlay(), this.uploadAttachments(t.originalEvent.dataTransfer.files) }, stopPropagation: function (e) { e.stopPropagation() }, createHTML: function () { var t = this.createMainCommentingFieldElement(); this.$el.append(t), t.find(".control-row").hide(), t.find(".close").hide(), this.options.enableNavigation && (this.$el.append(this.createNavigationElement()), this.showActiveSort()); var n = this.createSpinner(); this.$el.append(n); var a = e("<div/>", { class: "data-container", "data-container": "comments" }); this.$el.append(a); var i = e("<div/>", { class: "no-comments no-data", text: this.options.textFormatter(this.options.noCommentsText) }), o = e("<i/>", { class: "fa fa-comments fa-2x" }); if (this.options.noCommentsIconURL.length && (o.css("background-image", 'url("' + this.options.noCommentsIconURL + '")'), o.addClass("image")), i.prepend(e("<br/>")).prepend(o), a.append(i), this.options.enableAttachments) { var r = e("<div/>", { class: "data-container", "data-container": "attachments" }); this.$el.append(r); var s = e("<div/>", { class: "no-attachments no-data", text: this.options.textFormatter(this.options.noAttachmentsText) }), l = e("<i/>", { class: "fa fa-paperclip fa-2x" }); this.options.attachmentIconURL.length && (l.css("background-image", 'url("' + this.options.attachmentIconURL + '")'), l.addClass("image")), s.prepend(e("<br/>")).prepend(l), r.append(s); var d = e("<div/>", { class: "droppable-overlay" }), c = e("<div/>", { class: "droppable-container" }), p = e("<div/>", { class: "droppable" }), m = e("<i/>", { class: "fa fa-paperclip fa-4x" }); this.options.uploadIconURL.length && (m.css("background-image", 'url("' + this.options.uploadIconURL + '")'), m.addClass("image")); var h = e("<div/>", { text: this.options.textFormatter(this.options.attachmentDropText) }); p.append(m), p.append(h), d.html(c.html(p)).hide(), this.$el.append(d); var u = e("<button/>", { text: this.options.loadMoreCommentsText, class: "load-more", id: "load-more" }); this.$el.append(u), this.$el.find("#load-more").hide() } }, createProfilePictureElement: function (t, n) { if (n) var a = e("<div/>").css({ "background-image": "url(" + this.options.commentProfilePicturePath + n + ")" }); else a = e("<i/>", { class: "fa fa-user" }); return a.addClass("profile-picture"), a.attr("data-user-id", n), this.options.roundProfilePictures && a.addClass("round"), a }, createMainCommentingFieldElement: function () { return this.createCommentingFieldElement(void 0, void 0, !0) }, pingingUser: function (t) { var n = this; n.options.enablePinging && (e(".textarea").textcomplete([{ match: /(^|\s)@([^@]*)$/i, index: 2, search: function (e, t) { e = n.normalizeSpaces(e); n.options.searchUsers(e, t, function () { t([]) }) }, template: function (t) { var a = e("<div/>"), i = n.createProfilePictureElement(null, t.profile_picture_url), o = e("<div/>", { class: "details" }), r = e("<div/>", { class: "name" }).html(t.fullname), s = e("<div/>", { class: "email" }).html(t.email); return t.email ? o.append(r).append(s) : (o.addClass("no-email"), o.append(r)), a.append(i).append(o), a.html() }, replace: function (e) { return " " + n.createTagElement("@" + e.fullname, "ping", e.id, { "data-user-id": e.id })[0].outerHTML + " " } }], { appendTo: ".jquery-comments", dropdownClassName: "dropdown autocomplete", maxCount: 5, rightEdgeOffset: 0, debounce: 250 }), e.fn.textcomplete.Dropdown.prototype.render = function (t) { var a = this._buildContents(t), i = e.map(t, function (e) { return e.value }); if (t.length) { var o = t[0].strategy; o.id ? this.$el.attr("data-strategy", o.id) : this.$el.removeAttr("data-strategy"), this._renderHeader(i), this._renderFooter(i), a && (this._renderContents(a), this._fitToBottom(), this._fitToRight(), this._activateIndexedItem()), this._setScroll() } else this.noResultsMessage ? this._renderNoResultsMessage(i) : this.shown && this.deactivate(); var r = parseInt(this.$el.css("top")) + n.options.scrollContainer.scrollTop(); this.$el.css("top", r); var s = this.$el.css("left"); this.$el.css("left", 0); var l = n.$el.width() - this.$el.outerWidth(), d = Math.min(l, parseInt(s)); this.$el.css("left", d) }, e.fn.textcomplete.ContentEditable.prototype._skipSearch = function (e) { switch (e.keyCode) { case 9: case 13: case 16: case 17: case 33: case 34: case 40: case 38: case 27: return !0 }if (e.ctrlKey) switch (e.keyCode) { case 78: case 80: return !0 } }) }, createCommentingFieldElement: function (t, n, a) { var i = this, o = e("<div/>", { class: "commenting-field" }); if (!this.options.enableCommentingField && a && o.css("display", "none"), a && o.addClass("main"), n) var r = this.commentsById[n].profilePictureURL, s = this.commentsById[n].creator; else r = this.options.profilePictureURL, s = this.options.creator; var l = this.createProfilePictureElement(r, s), d = e("<div/>", { class: this.options.isMainPage ? "textarea-wrapper main-textarea-wrapper" : "textarea-wrapper" }), c = e("<div/>", { class: "control-row" }), p = e("<div/>", { class: this.options.isMainPage ? "textarea main-textarea" : "textarea", contenteditable: !0, "data-emojiable": !0, "data-emoji-input": "unicode", "data-placeholder": this.options.textFormatter(this.options.textareaPlaceholderText) }); this.adjustTextareaHeight(p, !1); var m = e("<span/>", { class: "close inline-button" }).append(e('<span class="left"/>')).append(e('<span class="right"/>')); if (n) { var h = this.options.textFormatter(this.options.saveText), u = e("<span/>", { class: "delete", text: this.options.textFormatter(this.options.deleteText) }).css("background-color", this.options.deleteButtonColor); c.append(u), this.isAllowedToDelete(n) && u.addClass("enabled") } else { h = this.options.textFormatter(this.options.sendText); if (this.options.enableAttachments) { var f = e("<span/>", { class: "enabled upload" }), g = e("<i/>", { class: "fa fa-paperclip" }), v = e("<input/>", { type: "file", "data-role": "none" }); e.browser.mobile || v.attr("multiple", "multiple"), this.options.uploadIconURL.length && (g.css("background-image", 'url("' + this.options.uploadIconURL + '")'), g.addClass("image")), f.append(g).append(v), c.append(f.clone()), a && d.append(f.clone().addClass("inline-button")) } } var C = e("<span/>", { class: (n ? "update" : "send") + " save highlight-background", text: h }); if (c.prepend(C), d.append(m).append(p).append(c), o.append(l).append(d), t) { p.attr("data-parent", t); var b = this.commentsById[t]; if (b.parent) { p.html("&nbsp;"); var x = "@" + b.fullname, y = this.createTagElement(x, "reply-to", b.creator, { "data-user-id": b.creator }); p.prepend(y) } } return e(function () { window.emojiPicker = new EmojiPicker({ emojiable_selector: "[data-emojiable=true]", assetsPath: i.options.rootUrl + "/lib/emoji-picker/img/", popupButtonClasses: "fa fa-smile-o" }, i), window.emojiPicker.discover(), i.pingingUser(p) }), o }, createNavigationElement: function () { var t = e("<ul/>", { class: "navigation" }), n = e("<div/>", { class: "navigation-wrapper" }); t.append(n); var a = e("<li/>", { text: this.options.textFormatter(this.options.newestText), "data-sort-key": "newest", "data-container-name": "comments" }), i = e("<li/>", { text: this.options.textFormatter(this.options.oldestText), "data-sort-key": "oldest", "data-container-name": "comments" }), o = e("<li/>", { text: this.options.textFormatter(this.options.popularText), "data-sort-key": "popularity", "data-container-name": "comments" }), r = e("<li/>", { text: this.options.textFormatter(this.options.attachmentsText), "data-sort-key": "attachments", "data-container-name": "attachments" }), s = e("<i/>", { class: "fa fa-paperclip" }); this.options.attachmentIconURL.length && (s.css("background-image", 'url("' + this.options.attachmentIconURL + '")'), s.addClass("image")), r.prepend(s); var l = e("<div/>", { class: "navigation-wrapper responsive" }), d = e("<ul/>", { class: "dropdown" }), c = e("<li/>", { class: "title" }), p = e("<header/>"); return c.append(p), l.append(c), l.append(d), t.append(l), n.append(a).append(i), d.append(a.clone()).append(i.clone()), (this.options.enableReplying || this.options.enableUpvoting) && (n.append(o), d.append(o.clone())), this.options.enableAttachments && (n.append(r), l.append(r.clone())), this.options.forceResponsive && this.forceResponsive(), t }, createSpinner: function () { var t = e("<div/>", { class: "spinner" }), n = e("<i/>", { class: "fa fa-spinner fa-spin" }); return this.options.spinnerIconURL.length && (n.css("background-image", 'url("' + this.options.spinnerIconURL + '")'), n.addClass("image")), t.html(n), t }, createCommentElement: function (t) { var n = e("<li/>", { "data-id": t.id, class: "comment" + (null == t.parent ? " comment-panel" : "") }).data("model", t); t.createdByCurrentUser && n.addClass("by-current-user"), t.createdByAdmin && n.addClass("by-admin"); var a = e("<ul/>", { class: "child-comments" }), i = this.createCommentWrapperElement(t); return n.append(i), null == t.parent && n.append(a), n }, createCommentWrapperElement: function (t) { var n = e("<div/>", { class: "comment-wrapper " + (null == t.parent ? "main-comment" : "") }), a = this.createProfilePictureElement(t.profilePictureURL, t.creator), i = e("<time/>", { text: this.options.timeFormatter(t.created), "data-original": t.created }), o = e("<span/>", { "data-user-id": t.creator, text: t.createdByCurrentUser ? this.options.textFormatter(this.options.youText) : t.fullname }), r = e("<span/>", { text: " " + this.options.postOn + " ", class: "post-on-text" }).append(" ").append(e("<a/>", { href: this.options.rootUrl + t.postOnURL, html: t.groupName, class: "post-on-link" })); if (t.profileURL && (o = e("<a/>", { href: t.profileURL, html: o })), t.parent || !(null != t.postOnURL && null != t.postOnURL && t.postOnURL.length >= 5)) var s = e("<div/>", { class: "name", html: o }); else s = e("<div/>", { class: "name", html: o.append(r) }); if (t.createdByAdmin && s.addClass("highlight-font-bold"), t.parent) { var l = this.commentsById[t.parent]; if (null != l && l.parent) { var d = e("<span/>", { class: "reply-to", text: l.fullname, "data-user-id": l.creator }), c = e("<i/>", { class: "fa fa-share" }); this.options.replyIconURL.length && (c.css("background-image", 'url("' + this.options.replyIconURL + '")'), c.addClass("image")), d.prepend(c), s.append(d) } } if (t.isNew) { var p = e("<span/>", { class: "new highlight-background", text: this.options.textFormatter(this.options.newText) }); s.append(p) } var m = e("<div/>", { class: "wrapper" }), h = e("<div/>", { class: "content" }), u = null != t.fileURL; if (u) { var f = null, g = null; if (t.fileMimeType) { var v = t.fileMimeType.split("/"); 2 == v.length && (f = v[1], g = v[0]) } var C = e("<a/>", { class: "attachment", href: this.options.filePath + t.id, target: "_blank" }); if ("image" == g) { var b = e("<img/>", { src: this.options.filePath + t.id }); C.html(b) } else if ("video" == g) { var x = e("<video/>", { src: this.options.filePath + t.id, type: t.fileMimeType, controls: "controls" }); C.html(x) } else { var y = this; C = e("<a/>", { class: "attachment", style: "cursor: pointer", target: "_blank", id: y.options.filePath + t.id, click: function () { y.options.downloadAttachment(t) } }); var w = ["archive", "audio", "code", "excel", "image", "movie", "pdf", "photo", "picture", "powerpoint", "sound", "video", "word", "zip"], T = "fa fa-file-o"; w.indexOf(f) > 0 ? T = "fa fa-file-" + f + "-o" : w.indexOf(g) > 0 && (T = "fa fa-file-" + g + "-o"); var k = e("<i/>", { class: T }); this.options.fileIconURL.length && (k.css("background-image", 'url("' + this.options.fileIconURL + '")'), k.addClass("image")); var R = t.fileURL.split("/"), U = R[R.length - 1]; U = U.split("?")[0], U = decodeURIComponent(U), C.text(U), C.prepend(k) } h.html("<p class='comment-text'>" + this.highlightTags(t, this.linkify(this.escape(t.content)), t.id) + " </p>"), h.append(C) } else h.html(this.getFormattedCommentContent(t)); if (t.modified && t.modified != t.created) { var $ = this.options.timeFormatter(t.modified); if (null !== $ && "" !== $ && 0 !== $.localeCompare("1/1/1")) { var A = e("<time/>", { class: "edited", text: this.options.textFormatter(this.options.editedText) + " " + $, "data-original": t.modified }); h.append(A) } } var E = e("<span/>", { class: "actions" }), M = e("<span/>", { class: "separator", text: "·" }), P = e("<button/>", { class: "action reply", type: "button", text: this.options.textFormatter(this.options.replyText) }), I = e("<i/>", { class: "fa fa-thumbs-up" }); this.options.upvoteIconURL.length && (I.css("background-image", 'url("' + this.options.upvoteIconURL + '")'), I.addClass("image")); var L = this.createUpvoteElement(t); if (this.options.enableUpvoting && E.append(L), this.options.enableReplying && E.append(P), t.createdByCurrentUser || this.options.currentUserIsAdmin) if (u && t.createdByCurrentUser) { var _ = e("<button/>", { class: "action delete enabled", text: this.options.textFormatter(this.options.deleteText) }); E.append(_) } else if (!u && t.createdByCurrentUser) { var D = e("<button/>", { class: "action edit", text: this.options.textFormatter(this.options.editText) }); E.append(D) } return E.children().each(function (t, n) { e(n).is(":last-child") || e(n).after(M.clone()) }), m.append(h), m.append(E), n.append(a).append(i).append(s).append(m), n }, createUpvoteElement: function (t) { var n = e("<i/>", { class: "fa fa-thumbs-up" }); return this.options.upvoteIconURL.length && (n.css("background-image", 'url("' + this.options.upvoteIconURL + '")'), n.addClass("image")), e("<button/>", { class: "action upvote" + (t.userHasUpvoted ? " highlight-font" : "") }).append(e("<span/>", { text: t.upvoteCount, class: "upvote-count" })).append(n) }, createTagElement: function (t, n, a, i) { var o = e("<input/>", { class: "tag", type: "button", "data-role": "none" }); return n && o.addClass(n), o.val(t), o.attr("data-value", a), i && o.attr(i), o }, reRenderComment: function (t) { var n = this.commentsById[t]; if (null != n) { var a = this.$el.find('li.comment[data-id="' + n.id + '"]'), i = this; a.each(function (t, a) { var o = i.createCommentWrapperElement(n); e(a).find(".comment-wrapper").first().replaceWith(o) }) } }, reRenderCommentActionBar: function (t) { var n = this.commentsById[t]; if (null != n) { var a = this.$el.find('li.comment[data-id="' + n.id + '"]'), i = this; a.each(function (t, a) { var o = i.createCommentWrapperElement(n); e(a).find(".actions").first().replaceWith(o.find(".actions")) }) } }, reRenderUpvotes: function (t) { var n = this.commentsById[t]; if (null != n) { var a = this.$el.find('li.comment[data-id="' + n.id + '"]'), i = this; a.each(function (t, a) { var o = i.createUpvoteElement(n); e(a).find(".upvote").first().replaceWith(o) }) } }, createCssDeclarations: function () { e("head style.jquery-comments-css").remove(), this.createCss(".jquery-comments ul.navigation li.active:after {background: " + this.options.highlightColor + " !important;", NaN), this.createCss(".jquery-comments ul.navigation ul.dropdown li.active {background: " + this.options.highlightColor + " !important;", NaN), this.createCss(".jquery-comments .highlight-background {background: " + this.options.highlightColor + " !important;", NaN), this.createCss(".jquery-comments .highlight-font {color: " + this.options.highlightColor + " !important;}"), this.createCss(".jquery-comments .highlight-font-bold {color: " + this.options.highlightColor + " !important;font-weight: bold;}") }, createCss: function (t) { var n = e("<style/>", { type: "text/css", class: "jquery-comments-css", text: t }); e("head").append(n) }, getComments: function () { var e = this; return Object.keys(this.commentsById).map(function (t) { return e.commentsById[t] }) }, getChildComments: function (e) { return this.getComments().filter(function (t) { return t.parent == e }) }, getAttachments: function () { return this.getComments().filter(function (e) { return null != e.fileURL }) }, getOutermostParent: function (e) { var t = e; do { var n = this.commentsById[t]; null != n && null != n.parent && (t = n.parent) } while (null != n && null != n.parent); return n }, createCommentJSON: function (e) { var t = (new Date).toISOString(); return { id: "c" + (this.getComments().length + 1), parent: e.attr("data-parent") || null, created: t, modified: t, content: this.getTextareaContent(e), pings: this.getPings(e), fullname: this.options.textFormatter(this.options.youText), profilePictureURL: this.options.profilePictureURL, createdByCurrentUser: !0, upvoteCount: 0, userHasUpvoted: !1 } }, isAllowedToDelete: function (t) { if (this.options.enableDeleting) { var n = !0; return this.options.enableDeletingCommentWithReplies || e(this.getComments()).each(function (e, a) { a.parent == t && (n = !1) }), n } return !1 }, setToggleAllButtonText: function (e, t) { var n = this, a = e.find("span.text"), i = e.find(".caret"), o = function () { var t = n.options.textFormatter(n.options.viewAllRepliesText), i = e.siblings(".comment").length; t = t.replace("__replyCount__", i), a.text(t) }, r = this.options.textFormatter(this.options.hideRepliesText); t ? (a.text() == r ? o() : a.text(r), i.toggleClass("up")) : a.text() != r && o() }, adjustTextareaHeight: function (t, n) { t = e(t); var a, i = 1 == n ? this.options.textareaRowsOnFocus : this.options.textareaRows; do { a = void 0, a = 2.2 + 1.45 * (i - 1), t.css("height", a + "em"), i++; var o = t[0].scrollHeight > t.outerHeight(), r = 0 != this.options.textareaMaxRows && i > this.options.textareaMaxRows } while (o && !r) }, clearTextarea: function (e) { e.empty().trigger("input") }, getTextareaContent: function (t, n) { var a = t.clone(); a.find(".reply-to.tag").remove(), a.find(".tag.hashtag").replaceWith(function () { return n ? e(this).val() : "#" + e(this).attr("data-value") }), a.find(".tag.ping").replaceWith(function () { return n ? e(this).val() : "@" + e(this).attr("data-value") }); var i = a.text().replace(/^\s+/g, ""); return i = this.normalizeSpaces(i) }, getFormattedCommentContent: function (e, t) { var n = this.escape(e.content); return n = this.linkify(n, e.id), n = this.highlightTags(e, n), t && (n = n.replace(/(?:\n)/g, "<br>")), n }, getPings: function (t) { let n = []; return e.map(t.find(".ping"), function (t) { n.push(e(t).attr("data-value")) }), n }, moveCursorToEnd: function (t) { if (t = e(t)[0], e(t).trigger("input"), e(t).scrollTop(t.scrollHeight), void 0 !== window.getSelection && void 0 !== document.createRange) { var n = document.createRange(); n.selectNodeContents(t), n.collapse(!1); var a = window.getSelection(); a.removeAllRanges(), a.addRange(n) } else if (void 0 !== document.body.createTextRange) { var i = document.body.createTextRange(); i.moveToElementText(t), i.collapse(!1), i.select() } t.focus() }, escape: function (t) { return e("<pre/>").text(this.normalizeSpaces(t)).html() }, normalizeSpaces: function (e) { if (null != e) return e.replace(new RegExp(" ", "g"), " ") }, after: function (e, t) { var n = this; return function () { if (0 == --e) return t.apply(n, arguments) } }, highlightTags: function (e, t) { return this.options.enableHashtags && (t = this.highlightHashtags(e, t)), this.options.enablePinging && (t = this.highlightPings(e, t)), t }, highlightHashtags: function (e, t) { var n = this; if (-1 != t.indexOf("#")) { t = t.replace(/(^|\s)#([A-Za-zا-ي\d-_أىäöüß]+)/gi, function (e, t, a) { return t + (i = a, (i = n.createTagElement("#" + i, "hashtag", i))[0].outerHTML); var i }) } return t }, highlightPings: function (e, t) { var n = this; if (-1 != t.indexOf("@")) { t = t.replace(/(^|\s)@([a-z\d-_.]+|[A-Z\d-_.]+|[أ-ي\d-_.]+||[ا-ي\d-_.]+)/gim, function (e, t, a) { return t + (i = a, (i = n.createTagElement("@" + i, "ping", i))[0].outerHTML); var i }) } return t }, getYoutubeEmbededId: function (e) { var t = e.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/); return t && 11 == t[2].length ? "https://www.youtube.com/embed/" + t[2] : "error" }, matchYoutubeUrl: function (e) { return !!e.match(/^.*(?:https?:\/\/)?(?:m\.|www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?.*/) }, linkify: function (e, t) { var n, a, i, o; if (this.matchYoutubeUrl(e)) { a = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim, i = /(^|[^\/f])(www\.[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim, n = "<p>" + e.replace(/(?:https?|ftp):\/\/[\n\S]+/g, "") + "</p>" + (n = (n = (e = this.getYoutubeEmbededId(e)).replace(a, '<iframe  width="420" height="315" src="$1" >$1</iframe>')).replace(i, '$1<iframe   width="420" height="315" src="http://$2" >$2</iframe>')) } else a = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim, i = /(^|[^\/f])(www\.[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim, o = /(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim, n = (n = (n = e.replace(a, '<a id="link-preview-' + t + '" class="link-preview" href="$1" target="_blank">$1</a>')).replace(i, '$1<a id="link-preview-' + t + '" class="link-preview" href="http://$2" target="_blank">$2</a>')).replace(o, '<a id="link-preview-' + t + '" class="link-preview" href="mailto:$1">$1</a>'); if ((e.match(/<a href/g) || []).length > 0) { for (var r = e.split(/(<\/a>)/g), s = 0; s < r.length; s++)null == r[s].match(/<a href/g) && (r[s] = r[s].replace(a, '<a href="$1" target="_blank">$1</a>').replace(i, '$1<a href="http://$2" target="_blank">$2</a>').replace(o, '<a href="mailto:$1">$1</a>')); return r.join("") } return n }, waitUntil: function (e, t) { var n = this; e() ? t() : setTimeout(function () { n.waitUntil(e, t) }, 100) }, applyInternalMappings: function (e) { var t = {}, n = this.options.fieldMappings; for (var a in n) n.hasOwnProperty(a) && (t[n[a]] = a); return this.applyMappings(t, e) }, applyExternalMappings: function (e) { var t = this.options.fieldMappings; return this.applyMappings(t, e) }, applyMappings: function (e, t) { var n = {}; for (var a in t) { if (a in e) n[e[a]] = t[a] } return n } }; e.fn.comments = function (n) { var a = Object.create(t); return e.data(this, "comments", a), a.init(n || {}, this), a } });